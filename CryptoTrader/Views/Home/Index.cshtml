@using CryptoTrader.Utils
@{
    ViewData["Title"] = "Home";
}

<div class="container-fluid mt-4">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-3">
            <div class="list-group">
                <h5 class="mb-3">Top 15 Coins</h5>
                @* Dynamically load coin list *@
                @foreach (var coin in CoinInfo.CoinNames)
                {
                    <a href="#" class="list-group-item list-group-item-action" data-id="@coin.Key" role="button">@coin.Value</a>
                }
            </div>
        </div>

        <div class="col-md-9">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <img src="https://assets.coingecko.com/coins/images/1/large/bitcoin.png" alt="Bitcoin" width="40" class="me-3" />
                        <h4 class="mb-0">Bitcoin (BTC)</h4>
                        <span id="priceChangeBadge" class="badge ms-3">-1.27%</span>
                    </div>

                    <h3 id="currentPrice">$96,254.24</h3>

                    <div class="mb-3 overflow-auto">
                        <canvas id="priceChart" style="min-width: 600px;"></canvas>
                    </div>

                    <div class="btn-group mb-3" role="group" aria-label="Chart Range">
                        <button class="btn btn-outline-primary range-btn" data-range="1d">1D</button>
                        <button class="btn btn-outline-primary range-btn" data-range="7d">1W</button>
                        <button class="btn btn-outline-primary range-btn" data-range="30d">1M</button>
                        <button class="btn btn-outline-primary range-btn" data-range="365d">1Y</button>
                    </div>

                    <div class="mb-2">Market Cap: <strong>$1.91T</strong></div>
                    <div class="mb-2">Volume (24h): <strong>$17.28B</strong></div>
                    <div class="mb-2">Circulating Supply: <strong>19.86M</strong></div>

                    <form class="row g-2 mt-3" method="post" asp-action="Trade" id="tradeForm">
                        <input type="hidden" name="CoinId" id="coinIdInput" />
                        <div class="col-auto">
                            <input type="number" class="form-control" name="Amount" id="amountInput" placeholder="Amount" min="0.0001" step="0.0001" required />
                            <div class="invalid-feedback" id="amountError"></div>
                        </div>
                        <div class="col-auto">
                            <button name="type" value="buy" type="submit" class="btn btn-success">Buy</button>
                        </div>
                        <div class="col-auto">
                            <button name="type" value="sell" type="submit" class="btn btn-danger">Sell</button>
                        </div>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('priceChart').getContext('2d');
    let priceChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Price',
                data: [],
                borderColor: '#f7931a',
                backgroundColor: 'rgba(247,147,26,0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            plugins: { legend: { display: false } },
            scales: { x: { display: false } },
            elements: { point: { radius: 0 } }
        }
    });

    let currentCoin = "bitcoin";
    let currentRange = "1d";
    let currentPrice = 0;

    async function loadCoinData(coinId, range = "1d") {
        currentCoin = coinId;
        currentRange = range;
        document.getElementById('coinIdInput').value = coinId;

        try {
            const marketChartUrl = `https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=${range}`;
            const detailUrl = `https://api.coingecko.com/api/v3/coins/${coinId}?localization=false`;

            const [chartRes, detailRes] = await Promise.all([
                fetch(marketChartUrl),
                fetch(detailUrl)
            ]);

            const chartData = await chartRes.json();
            const detailData = await detailRes.json();
            const coin = detailData.market_data;

            const prices = chartData.prices.map(p => p[1]);
            const labels = chartData.prices.map(p => {
                const d = new Date(p[0]);
                return range === "1d" ? d.toLocaleTimeString() : d.toLocaleDateString();
            });

            priceChart.data.labels = labels;
            priceChart.data.datasets[0].data = prices;
            priceChart.update();

            document.querySelector("h4.mb-0").textContent = `${detailData.name} (${detailData.symbol.toUpperCase()})`;
            currentPrice = coin.current_price.usd;
            document.querySelector("h3").textContent = `$${currentPrice.toLocaleString()}`;
            document.querySelector("img").src = detailData.image.large;

            const change24h = coin.price_change_percentage_24h;
            const badge = document.getElementById("priceChangeBadge");
            badge.textContent = `${change24h.toFixed(2)}%`;
            badge.className = "badge ms-3 " + (change24h >= 0 ? "bg-success" : "bg-danger");

            const infoBlocks = document.querySelector(".card-body").querySelectorAll(".mb-2");
            infoBlocks[0].innerHTML = `Market Cap: <strong>$${(coin.market_cap.usd / 1e12).toFixed(2)}T</strong>`;
            infoBlocks[1].innerHTML = `Volume (24h): <strong>$${(coin.total_volume.usd / 1e9).toFixed(2)}B</strong>`;
            infoBlocks[2].innerHTML = `Circulating Supply: <strong>${coin.circulating_supply.toLocaleString()}</strong>`;

            // Optional: Auto-refresh data every 60s
            if (window.priceRefreshTimer) clearInterval(window.priceRefreshTimer);
            window.priceRefreshTimer = setInterval(() => loadCoinData(currentCoin, currentRange), 60000);
        } catch (err) {
            console.error("Error loading coin data:", err);
            showError("Error loading coin data. Please try again.");
        }
    }

    function showError(message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-danger alert-dismissible fade show';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.row'));
    }

    document.querySelectorAll(".list-group-item").forEach(link => {
        link.addEventListener("click", (e) => {
            e.preventDefault();
            const coinId = link.getAttribute("data-id");
            loadCoinData(coinId);

            document.querySelectorAll(".list-group-item").forEach(l => {
                l.classList.remove("active");
                l.removeAttribute("aria-current");
            });
            link.classList.add("active");
            link.setAttribute("aria-current", "true");
        });
    });

    document.querySelectorAll(".range-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            document.querySelectorAll(".range-btn").forEach(b => {
                b.classList.remove("active");
                b.removeAttribute("aria-current");
            });
            btn.classList.add("active");
            btn.setAttribute("aria-current", "true");

            const range = btn.getAttribute("data-range");
            loadCoinData(currentCoin, range);
        });
    });

    document.getElementById('tradeForm').addEventListener('submit', function(e) {
        const amount = parseFloat(document.getElementById('amountInput').value);
        const amountError = document.getElementById('amountError');

        if (isNaN(amount) || amount <= 0) {
            e.preventDefault();
            amountError.textContent = 'Please enter a valid amount greater than 0';
            document.getElementById('amountInput').classList.add('is-invalid');
            return;
        }

        document.getElementById('amountInput').classList.remove('is-invalid');
    });

    document.getElementById('amountInput').addEventListener('input', function () {
        this.classList.remove('is-invalid');
    });

    document.querySelector('.range-btn[data-range="1d"]').classList.add("active");
    loadCoinData("bitcoin", "1d");
</script>
